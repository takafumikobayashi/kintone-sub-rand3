/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/***/ (() => {

eval("(function (PLUGIN_ID) {\n  const formEl = document.querySelector('.js-submit-settings');\n  const cancelButtonEl = document.querySelector('.js-cancel-button');\n  if (!(formEl && cancelButtonEl)) {\n    throw new Error('Required elements do not exist.');\n  }\n  const config = kintone.plugin.app.getConfig(PLUGIN_ID);\n  let appId = kintone.app.getId();\n\n  //Selectエレメント作成\n  let selectMenu_subtable = document.createElement('select');\n  selectMenu_subtable.id = 'field-selection_subtable';\n  selectMenu_subtable.className = 'field-selection_subtable';\n\n  let selectMenu_getfield = document.createElement('select');\n  selectMenu_getfield.id = 'field-selection_getfield';\n  selectMenu_getfield.className = 'field-selection_getfield';\n\n  let selectMenu_targetfield1 = document.createElement('select');\n  selectMenu_targetfield1.id = 'field-selection_targetfield1';\n  selectMenu_targetfield1.className = 'field-selection_targetfield1';\n\n  let selectMenu_targetfield2 = document.createElement('select');\n  selectMenu_targetfield2.id = 'field-selection_targetfield2';\n  selectMenu_targetfield2.className = 'field-selection_targetfield2';\n\n  let selectMenu_targetfield3 = document.createElement('select');\n  selectMenu_targetfield3.id = 'field-selection_targetfield3';\n  selectMenu_targetfield3.className = 'field-selection_targetfield3';\n\n  //APIで設計情報を取得\n  kintone.api('/k/v1/form', 'GET', {app: appId}, function(resp) {\n\n    for (let key in resp.properties) {\n      let field = resp.properties[key];\n\n      //field-selection_subtableへの格納\n      if (field.type === 'SUBTABLE') {\n        let option = document.createElement('option'); // 新しい<option>エレメントを作成\n        option.value = field.code;  // <option>のvalueを設定\n        option.textContent = field.label;  // <option>のテキストを設定\n\n        if (field.code === config.subtable_code) {\n          option.selected = true;  // <option>を選択済みにする\n\n          // 対象フィールドが選択されている場合、デフォルト表示を行う\n          if (config.subtable_field_code) {\n            for (let key2 in field.fields){\n              let field2 = field.fields[key2];\n\n              if(field2.type === \"SINGLE_LINE_TEXT\") {\n                let option2 = document.createElement('option'); // 新しい<option>エレメントを作成\n                option2.value = field2.code;  // <option>のvalueを設定\n                option2.textContent = field2.label;  // <option>のテキストを設定\n\n                if (field2.code === config.subtable_field_code) {\n                  option2.selected = true;  // <option>を選択済みにする\n                }\n                console.log(option2);\n                selectMenu_getfield.appendChild(option2);  // <select>メニューに<option>を追加    \n              }\n            }\n          }\n        }\n        selectMenu_subtable.appendChild(option);  // <select>メニューに<option>を追加\n      };\n\n      //field-selection_targetfield1への格納\n      if (field.type === 'SINGLE_LINE_TEXT') {\n        let option = document.createElement('option'); // 新しい<option>エレメントを作成\n        option.value = field.code;  // <option>のvalueを設定\n        option.textContent = field.label;  // <option>のテキストを設定\n\n        if (field.code === config.target_field_code1) {\n          option.selected = true;  // <option>を選択済みにする\n        }\n        selectMenu_targetfield1.appendChild(option);  // <select>メニューに<option>を追加\n      }\n\n      //field-selection_targetfield2への格納\n      if (field.type === 'SINGLE_LINE_TEXT') {\n        let option = document.createElement('option'); // 新しい<option>エレメントを作成\n        option.value = field.code;  // <option>のvalueを設定\n        option.textContent = field.label;  // <option>のテキストを設定\n\n        if (field.code === config.target_field_code2) {\n          option.selected = true;  // <option>を選択済みにする\n        }\n        selectMenu_targetfield2.appendChild(option);  // <select>メニューに<option>を追加\n      }\n\n      //field-selection_targetfield3への格納\n      if (field.type === 'SINGLE_LINE_TEXT') {\n        let option = document.createElement('option'); // 新しい<option>エレメントを作成\n        option.value = field.code;  // <option>のvalueを設定\n        option.textContent = field.label;  // <option>のテキストを設定\n\n        if (field.code === config.target_field_code3) {\n          option.selected = true;  // <option>を選択済みにする\n        }\n        selectMenu_targetfield3.appendChild(option);  // <select>メニューに<option>を追加\n      }\n    }\n\n    // <select>メニューをconfig画面の適切な場所に追加\n    formEl.querySelector('.field-selection-area_subtable').appendChild(selectMenu_subtable);\n    formEl.querySelector('.field-selection-area_getfield').appendChild(selectMenu_getfield);\n    formEl.querySelector('.field-selection-area_targetfield1').appendChild(selectMenu_targetfield1);\n    formEl.querySelector('.field-selection-area_targetfield2').appendChild(selectMenu_targetfield2);\n    formEl.querySelector('.field-selection-area_targetfield3').appendChild(selectMenu_targetfield3);\n\n  }, function(error) {\n      console.error('フォーム情報の取得に失敗しました。:', error);\n  }); \n\n\n  // field-selection_subtableのselect要素が変更されたときの処理\n  formEl.addEventListener('change', (e) => {\n\n    console.log(e.target);\n\n    // イベントが発生した要素が<select>でない場合は処理を終了\n    if (!e.target.matches('select#field-selection_subtable.field-selection_subtable')) {\n      return;\n    } else {\n\n      // 既存のselectを削除（もし存在する場合）\n      let existingSelect = document.getElementById('field-selection_getfield');\n      if (existingSelect) {\n        existingSelect.remove();\n      }\n\n      let selectMenu_getfield = document.createElement('select');\n      selectMenu_getfield.id = 'field-selection_getfield';\n      selectMenu_getfield.className = 'field-selection_getfield';    \n\n      //対象のサブテーブル要素取得\n      let appId = kintone.app.getId();\n      let subtable_code = selectMenu_subtable.value;\n\n      //APIで設計情報を取得\n      kintone.api('/k/v1/form', 'GET', {app: appId}, function(resp) {\n\n        const participantProperty = resp.properties.find(property => property.code === subtable_code);\n        if (participantProperty) {\n          participantProperty.fields.forEach(field => {\n              if (field.type === 'SINGLE_LINE_TEXT') {\n                  let option = document.createElement('option'); // 新しい<option>エレメントを作成\n                  option.value = field.code;  // <option>のvalueを設定\n                  option.textContent = field.label;  // <option>のテキストを設定\n\n                  if (field.code === config.subtable_field_code) {\n                      option.selected = true;  // <option>を選択済みにする\n                  }\n                  selectMenu_getfield.appendChild(option);  // <select>メニューに<option>を追加\n              }\n          });\n          formEl.querySelector('.field-selection-area_getfield').appendChild(selectMenu_getfield);\n\n        } else {\n            console.log(\"「参加者」コードのプロパティが見つかりませんでした。\");\n        }\n      });\n    };\n  });\n\n  formEl.addEventListener('submit', (e) => {\n    e.preventDefault();\n    let selectedValue_subtable = formEl.querySelector('.field-selection_subtable').value;\n    let selectedValue_getfield = formEl.querySelector('.field-selection_getfield').value;\n    let selectedValue_targetfield1 = formEl.querySelector('.field-selection_targetfield1').value;\n    let selectedValue_targetfield2 = formEl.querySelector('.field-selection_targetfield2').value;\n    let selectedValue_targetfield3 = formEl.querySelector('.field-selection_targetfield3').value;\n    kintone.plugin.app.setConfig({ subtable_code: selectedValue_subtable, subtable_field_code: selectedValue_getfield, target_field_code1: selectedValue_targetfield1, target_field_code2: selectedValue_targetfield2, target_field_code3: selectedValue_targetfield3 }, () => {      \n      swal({\n        title: '更新しました。',\n        text: '変更した設定を反映するには、「アプリの設定」画面に戻り 「アプリの更新」ボタンをクリックします。',\n        icon: 'success',\n        button: 'OK'\n      }).then(() => {\n        // ダイアログクローズ後の処理\n        window.location.href = '../../flow?app=' + kintone.app.getId();\n      });\n    });\n  });\n\n  cancelButtonEl.addEventListener('click', () => {\n    window.location.href = '../../' + kintone.app.getId() + '/plugin/';\n  });\n})(kintone.$PLUGIN_ID);\n\n\n//# sourceURL=webpack://kintone-sub-rand3/./src/js/config.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/config.js"]();
/******/ 	
/******/ })()
;